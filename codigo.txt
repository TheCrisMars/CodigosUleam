-- Crear la tabla TARJETA
	CREATE TABLE TARJETA(
		IDTARJETA INT NOT NULL PRIMARY KEY,
		NUMERO_TARJETA VARCHAR(16) UNIQUE,
		SALDO_TARJETA MONEY
	);

	-- Crear la tabla CLIENTE
	CREATE TABLE CLIENTE(
		IDCLIENTE INT IDENTITY (1,1) NOT NULL PRIMARY KEY,
		NOMBRES VARCHAR(50),
		APELLIDO VARCHAR(50),
		CI VARCHAR(10) NOT NULL UNIQUE,
		EMAIL VARCHAR(50) UNIQUE
	);

	-- Crear la tabla ARTICULO
	CREATE TABLE ARTICULO(
		IDARTICULO INT NOT NULL PRIMARY KEY,
		NOMBRE_ARTICULO VARCHAR(50),
		PRECIO_ARTICULO MONEY,
		STOCK INT NOT NULL
	);

	-- Agregar la restricción de CHECK en la tabla ARTICULO
	ALTER TABLE ARTICULO ADD CHECK (STOCK >= 0);

	-- Crear la tabla PEDIDO
	CREATE TABLE PEDIDO(
		IDPEDIDO INT IDENTITY (1,1) NOT NULL PRIMARY KEY,
		IDCLIENTE INT NOT NULL,
		FECHA_PEDIDO DATE NOT NULL,
		DIRECCION_ENTREGA VARCHAR(200),
		CONSTRAINT FK_IDCLIENTE FOREIGN KEY (IDCLIENTE) REFERENCES CLIENTE(IDCLIENTE),
	);

	CREATE TABLE DETALLE_PEDIDO(
		ID_DETALLE_PEDIDO INT IDENTITY (1,1) NOT NULL PRIMARY KEY,
		IDPEDIDO INT NOT NULL,
		IDARTICULO INT NOT NULL,
		CANTIDAD_SOLICITADA INT,
		CONSTRAINT FK_IDPEDIO FOREIGN KEY (IDPEDIDO) REFERENCES PEDIDO(IDPEDIDO),
		CONSTRAINT FK_ARTICULO FOREIGN KEY (IDARTICULO) REFERENCES ARTICULO(IDARTICULO),
	);
	-- Crear la tabla ENVIO
	CREATE TABLE ENVIO (
		IDENVIO INT IDENTITY (1,1) NOT NULL PRIMARY KEY,
		IDPEDIDO INT NOT NULL,
		FECHA_DE_ENVIO DATE,
		CONSTRAINT FK_ENVIO_PEDIDO FOREIGN KEY (IDPEDIDO) REFERENCES PEDIDO(IDPEDIDO),
	);

	CREATE PROCEDURE RealizarPedido (
		@ID_Cliente INT,
		@ID_Articulo INT,
		@Direccion_Entrega VARCHAR(200),
		@Cantidad_solicitada INT,
		@Numero_Tarjeta VARCHAR(16) -- Número de tarjeta para el pago
	)
	AS
	BEGIN
		SET NOCOUNT ON; -- Activar la salida de mensajes

		BEGIN TRY
			BEGIN TRANSACTION;

			DECLARE @StockActual INT;
			DECLARE @PrecioTotal MONEY;
			DECLARE @ID_Pedido INT;

			-- Insertar el pedido
			INSERT INTO PEDIDO (IDCLIENTE, FECHA_PEDIDO,DIRECCION_ENTREGA)
			VALUES (@ID_Cliente, GETDATE(), @Direccion_Entrega);

			-- Recuperar el ID del pedido recién insertado
			SET @ID_Pedido = SCOPE_IDENTITY();


			-- Insertar en la tabla ENVIO
			INSERT INTO ENVIO (IDPEDIDO, FECHA_DE_ENVIO)
			VALUES (@ID_Pedido, GETDATE()); 

			-- Verificar si hay suficiente stock disponible para el artículo
			SELECT @StockActual = STOCK
			FROM ARTICULO
			WHERE IDARTICULO = @ID_Articulo;

			IF @StockActual >= @Cantidad_solicitada
			BEGIN
				-- Calcular el precio total del pedido
				SELECT @PrecioTotal = PRECIO_ARTICULO * @Cantidad_solicitada
				FROM ARTICULO
				WHERE IDARTICULO = @ID_Articulo;

				-- Verificar si el saldo de la tarjeta es suficiente para realizar el pago
				IF EXISTS (SELECT 1 FROM TARJETA WHERE NUMERO_TARJETA = @Numero_Tarjeta AND SALDO_TARJETA >= @PrecioTotal)
				BEGIN

					-- Descontar el monto del pedido del saldo de la tarjeta
					UPDATE TARJETA
					SET SALDO_TARJETA = SALDO_TARJETA - @PrecioTotal
					WHERE NUMERO_TARJETA = @Numero_Tarjeta;

					INSERT INTO DETALLE_PEDIDO (IDPEDIDO,IDARTICULO, CANTIDAD_SOLICITADA)
					VALUES (@ID_Pedido, @ID_Articulo,@Cantidad_solicitada);

					-- Actualizar el stock del artículo
					UPDATE ARTICULO
					SET STOCK = STOCK - @Cantidad_solicitada
					WHERE IDARTICULO = @ID_Articulo;

					-- Confirmar la transacción
					COMMIT TRANSACTION;
					PRINT 'Pedido realizado con éxito.';
				END
				ELSE
				BEGIN
					-- No hay suficiente saldo en la tarjeta
					RAISERROR('No hay suficiente saldo en la tarjeta para realizar el pago.', 16, 1);
				END;
			END
			ELSE
			BEGIN
				-- No hay suficiente stock
				RAISERROR('No hay suficiente stock para realizar el pedido.', 16, 1);
			END;
		END TRY
		BEGIN CATCH
			-- Revertir la transacción en caso de error
			IF @@TRANCOUNT > 0 -- Verificación de Transacción en Curso
			BEGIN
				ROLLBACK TRANSACTION;
				PRINT ERROR_MESSAGE();
				RAISERROR('Error al realizar el pedido. La transacción ha sido revertida.', 16, 1);
			END;
		END CATCH;
	END;

	UPDATE ARTICULO
	SET STOCK = 20
	WHERE IDARTICULO = 1;

	-- Insertar datos TARJETA
	INSERT INTO TARJETA (IDTARJETA, NUMERO_TARJETA, SALDO_TARJETA)
	VALUES (1, '6547225784355653', 50);

	-- Insertar datos de ejemplo en la tabla CLIENTE
	INSERT INTO CLIENTE (NOMBRES, APELLIDO, CI, EMAIL)
	VALUES ('Juan', 'Mero', '1234567890', 'correo@ejemplo.com');

	-- Insertar datos de ejemplo en la tabla ARTICULO
	INSERT INTO ARTICULO (IDARTICULO, NOMBRE_ARTICULO, STOCK, PRECIO_ARTICULO)
	VALUES (1, 'Producto A', 10, 3),
		   (2, 'Producto B', 10, 5);


	EXECUTE RealizarPedido 
		@ID_Cliente = 1, 
		@ID_Articulo = 1, 
		@Direccion_Entrega = 'Calle Principal, Ciudad, País', 
		@Cantidad_solicitada = 1, 
		@Numero_Tarjeta = '6547225784355653';

		SELECT * FROM TARJETA;
		SELECT * FROM CLIENTE;
			SELECT * FROM ARTICULO;
		SELECT * FROM PEDIDO;
		SELECT * FROM DETALLE_PEDIDO;
		SELECT * FROM ENVIO;
